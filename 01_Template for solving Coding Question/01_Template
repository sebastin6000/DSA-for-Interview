                                                 FOLLOWING THIS STRUCTURED APPROACH TO SOLVE ANY DSA PROBLEM
                                                 -----------------------------------------------------------


------------------------------------ UP-TO-DATE DSA PROBLEM-SOLVING TEMPLATE --------------------------------------------

1. Understanding the problem statement
2. Extracting Imformation from the problem statement
3. Thinking Solution from Input to Output conversion from the question.
4. Input to Output convesion steps into smaller subtasks
5. Converting all the subtasks into code.

-------------------------------------------------------------------------------------------------------
1.Understanding the Problem Statement:
2.Extracting Information from the Problem Statement:
2.1 Input data type or data structure - 
2.2 Expected Output - 
2.3 Output return data type (or) data structure type - 
2.4 Understanding the Constraints in the problem statement- 
2.5 Understanding Time complexity expectations if any in the given problem statement.

3.Thinking Solution for the Problem Statement:
3.1 Getting Solution from Input to Output conversion:

4.Input to Output convesion steps into smaller subtasks:
4.1 After finding the steps from input to output conversion convert the steps into subtasks

5.Input to Output conversion subtasks into Code:
5.1 Code Requirement to complete the subtasks :
    need a loop ?, 
    need a data structure ?, 
    need a if codition ?. etc
5.2 Do every subtask with efficient Data structure and Algorithm.
5.2.1 Efficient data structure - 
5.2.2 Efficient Algorithm / pattern - 

------------------------------------ CONTINUE UPDATING THIS TEMPLATE --------------------------------------------



------------------------------------ PREVIOUSLY USED TEMPLATE --------------------------------------------
----------------------------------------------------------------------------------------------------------

                                    DSA Problem-Solving Template.

--> Understanding the problem statement
--> Extracting Imformation from the problem statement
--> Thinking Solution in conversional manner
--> converting the conversional solution into subtasks
--> converting the conversional solution subtasks into code.

1.Understanding the Problem Statement:
- Understand the Problem Statement
- What is being asked?: Carefully read the description to identify the problem's objective.
- In interview see the input to output conversion part you can understand the problem statement little quickly or easyly.
- So in interview write the Input to output in paper with this you can simplify the explaination of the question and saving some time.

2.Extracting Information from the Problem Statement:
- Input data type - with this we can know about the function arguments.
- Expected Output - Understand what output is expected.
- Output return data (or) data structure type - with this we understand what to return from the function.
- Understanding Time complexity expectations if any in the given problem statement -
- Understanding the Constraints - with this we can understand how much is the Input size that helps to thing how big the input

2.Extracting Information from the Problem Statement:
- Input data type -
- Expected Output -
- Output return type -
- Understanding Time complexity expectations if any in the given problem statement -
- Understanding the Constraints -

3.Thinking Solution for the Problem Statement:
3.1 How the input is convented into output in the question.
Ask yourself how they done the input to output.
Do the same to achieve the result.

3.2 Identification Part: Identify the Type of Problem - Recognize patterns
- Searching (binary search, linear search)
- Sorting (quick sort, merge sort)
- Greedy algorithms (minimizing/maximizing)
- Dynamic programming (overlapping subproblems, memoization)
- Graph problems (BFS, DFS, shortest path)
- Recursion or backtracking (divide and conquer)

3.3 Destructuring:
- Destructure the given problem statement into simple words to get the intuition for conversational solution by asking how.

3.4 Conversional solution into smaller subtask :
- After Finding out Solution in conversational manner and than breaking the conversional solution into smaller subtask
and then ask how I can achieve these conversional Solution Steps.

- Complete all the smaller subtask and Combine all the Subtask into solution.

4.Conversional Solution into Code:
- Choose the Right Data Structures.
- Design the Algorithm with respect to Edge Cases
- Consider cases where the input is
for Example
- Empty arrays, lists, or strings.
- Arrays with only one element.
- Arrays where no solution exists.
- Negative numbers, zeros, very large or very small numbers.
- Explicitly test and handle these cases in your solution.
The above are some example

- After converting the conversional solution into Subtasks and now we have to convert subtasks into code in java.
- Combine all the smaller Subproblems code for the Complete Solution.

